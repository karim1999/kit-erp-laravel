import React, { useState, useEffect } from "react";
import Constants from "../../../helpers/samples";
import SelectFieldComponent from "./Fields/SelectFieldComponent";
import TextFieldComponent from "./Fields/TextFieldComponent";
import moment from "moment";
import Slider from "react-slick";
import {InertiaLink} from "@inertiajs/inertia-react";
import {useField} from "formik";

export default function ({deal, pushDeal, pushQuote, pushAll, quote, quotes, stageValues}) {
    const [quoteId] = useField(`quote_id`);
    const settings= {
        infinite: false,
        // rows: 0,
        slidesToShow: 10,
        slidesToScroll: 1,
        arrows: true,
        dots: false,
        draggable: true,
        touchMove: true,
        centerMode: false,
        responsive: [
            {
                breakpoint: 1920,
                settings: {
                    slidesToShow: 12,
                }
            },
            {
                breakpoint: 1440,
                settings: {
                    slidesToShow: 9,
                }
            },
            {
                breakpoint: 1024,
                settings: {
                    slidesToShow: 6,
                }
            },
            {
                breakpoint: 600,
                settings: {
                    slidesToShow: 3,
                }
            },
            {
                breakpoint: 480,
                settings: {
                    slidesToShow: 1,
                }
            }
        ]
    }
    return (
        <div className="container my-4">
            {
                quotes && quotes.length > 0 &&
                <div className="row mb-2">
                    <div className="col-xl-12 col-lg-12 col-sm-12 col-12">
                        <label>Quote Version</label>
                        <Slider {...settings}>
                            {
                                quotes.map(quote => (
                                    <InertiaLink key={quote.id} href={"/quotes/"+quote.id} method="get" as="div" type="button">
                                        <span className={`horizontal-span ${quote.id === quoteId.value && 'active'}`}>
                                            {quote.quote_no}
                                        </span>
                                    </InertiaLink>
                                ))
                            }
                        </Slider>
                    </div>
                </div>
            }
            <hr />
            <div className="row">
                <div className="col-xl-2 col-lg-2 col-sm-2 col-8">
                    <TextFieldComponent type="text" label="Quote ID No." placeholder="Will be generated automatically" className="form-control" name="quote_no" disabled />
                </div>
                {/*<div className="col-xl-1 col-lg-1 col-sm-1 col-2">*/}
                {/*    <label>&nbsp;</label>*/}
                {/*    <button disabled={!quote} onClick={pushQuote} type="button" className="btn btn-warning btn-sm btn-block">Push Quote</button>*/}
                {/*</div>*/}
                {/*<div className="col-xl-1 col-lg-1 col-sm-1 col-2 px-2">*/}
                {/*    <label>&nbsp;</label>*/}
                {/*    <button disabled={!quote} onClick={pushDeal} type="button" className="btn btn-primary btn-sm btn-block">Push Deal</button>*/}
                {/*</div>*/}
                {/*<div className="col-xl-2 col-lg-2 col-sm-2 col-9">*/}
                {/*    <SelectFieldComponent className="custom-select" label="Quote Status" name="status">*/}
                {/*        {*/}
                {/*            Constants.statusTypes.map(status => <option key={status.value} value={status.value}>{status.value}</option>)*/}
                {/*        }*/}
                {/*    </SelectFieldComponent>*/}
                {/*</div>*/}
                <div className="col-xl-2 col-lg-2 col-sm-2 col-9">
                    <SelectFieldComponent className="custom-select" label="Quote Stage" name="quote_stage">
                        {
                            stageValues.map(status => <option key={status} value={status}>{status}</option>)
                        }
                    </SelectFieldComponent>
                </div>
                {/*<div className="col-xl-2 col-lg-2 col-sm-2 col-3">*/}
                {/*    <label>&nbsp;</label>*/}
                {/*    <button disabled={!quote} onClick={pushAll} type="button" className="btn btn-success btn-sm btn-block">Push All*/}
                {/*    </button>*/}
                {/*</div>*/}
            </div>
            <div className="row mt-4">
                <div className="col-xl-2 col-lg-2 col-sm-2 col-3">
                    <div className="form-group">
                        <label>Generated By</label>
                        <input type="text" className="form-control" placeholder="Mohammed Al Janahi" value={deal?.Created_By?.name} disabled/>
                    </div>
                </div>
                <div className="col-xl-2 col-lg-2 col-sm-2 col-3">
                    <div className="form-group">
                        <label>Generated Date / Time</label>
                        <input type="text" className="form-control datetime-picker" value={moment(deal?.Created_Time).format("llll")} disabled/>
                    </div>
                </div>
                <div className="col-xl-2 col-lg-2 col-sm-2 col-3">
                    <div className="form-group">
                        <label>Modified By</label>
                        <input type="text" className="form-control" placeholder="Mohammed Al Janahi" value={deal?.Modified_By?.name} disabled/>
                    </div>
                </div>
                <div className="col-xl-2 col-lg-2 col-sm-2 col-3">
                    <div className="form-group">
                        <label>Modified Date / Time</label>
                        <input type="text" className="form-control datetime-picker" placeholder="DD/MM/YYYY   11:59 PM" value={moment(deal?.Modified_Time).format("llll")} disabled/>
                    </div>
                </div>
            </div>
            <hr />
        </div>
    )
}
